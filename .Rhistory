install.packages('flipPlots')
install.packages('flipData', 'flipFormat', 'flipChartBasics')
install.packages('flipData')
install.packages(flipFormat')
q
quit()
)
''
install.packages('flipFormat')
install.packages('installr')
library(installr)
updateR()
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'profit is its own reward')
updateR()
library(dplyr)
library(docstring)
trim <- function(table, p = 0.1) {
#' Trimmed mean
#'
#' Trim the top and bottom (p*100)% of forecasts
#'
#' @param table The processed question data table (needs to have a forecast column)
#' @param p The proportion of forecasts to trim from each end (between 0 and 1)
#' @return The trimmed mean
table <- table %>% arrange(forecast)
trimN <- round(p * nrow(table))
browser()
lastRow <- nrow(table) - trimN
trimTable <- table[(trimN + 1):lastRow, ]
trimmedMean <- mean(trimTable[["forecast"]])
return(trimmedMean)
}
df <- data.table(forecast = c(rep(.1, 5), rep(.2, 5), rep(.4, 5),
rep(.5, 3), rep(1.0, 2)))
library(data.table)
df <- data.table(forecast = c(rep(.1, 5), rep(.2, 5), rep(.4, 5),
rep(.5, 3), rep(1.0, 2)))
trim(df)
library(devtools)
getwd()
setwd('fri/xpt')
devtools::check()
devtools::test()
devtools::test()
devtools::test()
devtools::install()
library(xpt)
fff <- c(0.1, 0.1, .2, .3, .9, .8, .9, .4, .444)
neymanAggCalc(fff)
identical(specific_function, neymanAggCalc)
q
q
c
devtools::install()
